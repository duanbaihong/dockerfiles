function printOK() {
  if [ $1 -ne 0 ]; then
    echo -e "[\033[33mFailed\033[0m]"
  else
    echo -e "[\033[32m  OK  \033[0m]"
  fi
}
function formatOutput() {
  width=110
  str=""
  arg=$1
  if [ "$arg" == "title" ]; then
    for i in `seq 1 $(expr $width + 8)`
    do
      str="${str}#"
    done
    echo $str
    return 0
  fi
  reparg=`echo $arg|sed 's|\\\033\[[0-9]*m||g'`
  if [ -n "$2" ]; then
    reparg2=`echo $2|sed 's|\\\033\[[0-9]*m||g'`
    argLen=$(expr ${width} - ${#reparg} - ${#reparg2} + 6)
    tab=""
    for b in `seq 1 ${argLen}`
    do
      tab="$tab "
    done
    echo -e "\033[36m$1$tab$2\033[0m"
    return 0
  else
    argLen=$(expr ${width} - ${#reparg})
    tab=""
    for b in `seq 1 ${argLen}`
    do
      tab="$tab "
    done
    echo -en "$arg$tab"
  fi
}
function init_koko_config() {
  formatOutput title
  id ${KOKO_USER} &>/dev/null 2>&1
  if [ $? -ne 0 ]; then
      formatOutput "Initial KOKO User [\033[31m${KOKO_USER}\033[0m]"
      #statements
      adduser -D -h ${KOKO_INSTALL} -s /sbin/nologin ${KOKO_USER} >& /dev/null;
      printOK $?
      formatOutput "Repair work directory [${KOKO_INSTALL}] permissions...."
      chown ${KOKO_USER}.${KOKO_USER} .  -R
      printOK $?
  fi
  if [ ! -n "$IP_DEVICE" ]; then
    IP_DEVICE=$(ip route|grep default|awk '{print $5}')
  fi
  if [ ! -n "$CORE_HOST" ]; then
    CORE_HOST=http://$(ip -o -4 addr list ${IP_DEVICE} | head -n1 | awk '{print $4}' | cut -d/ -f1):${JUMPSERVER_HTTP_PORT}
  fi

  if [ ! -s ${KOKO_INSTALL}/conf/config.yml ]; then
    formatOutput "Generate configuration file ${KOKO_INSTALL}/conf/config.yml...."
    cp -f config_example.yml ${KOKO_INSTALL}/conf/config.yml
    printOK $?
    sed -i "s|CORE_HOST:.*|CORE_HOST: ${CORE_HOST}|g" ${KOKO_INSTALL}/conf/config.yml
    sed -i "s|BOOTSTRAP_TOKEN:.*|BOOTSTRAP_TOKEN: ${BOOTSTRAP_TOKEN}|g" ${KOKO_INSTALL}/conf/config.yml
    formatOutput "Fix KOKO File Permissions [${KOKO_USER}]...."
    chown ${KOKO_USER}.${KOKO_USER} . -R
    printOK $?
fi
}