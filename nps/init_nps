function printOK() {
  if [ $1 -ne 0 ]; then
    echo -e "[\033[33mFailed\033[0m]"
  else
    echo -e "[\033[32m  OK  \033[0m]"
  fi
}
function formatOutput() {
  width=120
  str=""
  arg=$1
  if [ "$arg" == "title" ]; then
    for i in `seq 1 $(expr $width + 8)`
    do
      str="${str}#"
    done
    echo $str
    return 0
  fi
  reparg=`echo $arg|sed 's|\\\033\[[0-9]*m||g'`
  if [ -n "$2" ]; then
    reparg2=`echo $2|sed 's|\\\033\[[0-9]*m||g'`
    argLen=$(expr ${width} - ${#reparg} - ${#reparg2} + 6)
    tab=""
    for b in `seq 1 ${argLen}`
    do
      tab="$tab "
    done
    echo -e "\033[36m$1$tab$2\033[0m"
    return 0
  else
    argLen=$(expr ${width} - ${#reparg})
    tab=""
    for b in `seq 1 ${argLen}`
    do
      tab="$tab "
    done
    echo -en "$arg$tab"
  fi
}

# 生成配置文件
function initConfig(){
  if [ -z $NPS_WEB_PASSWORD ]; then
      NPS_WEB_PASSWORD=$(cat /dev/urandom |tr -dc '0-9-A-Z-a-z~@#%^*_+,.?<>'|head -c ${1:-12})
      formatOutput "NPS_${NPS_TYPE} Admin user password: \033[31m${NPS_WEB_PASSWORD}\033[0m"
      printOK $?
  fi
  formatOutput "Init Config files to [conf] directory...."
  if [ "$NPS_TYPE" == "Client" ]; then
    nps_config=${NPS_PREFIX}/conf/npc.conf
    if [ ! -s $nps_config ]; then
    cat <<EOF>$nps_config
[common]
server_addr=${NPS_SERVER_ADDR:-0.0.0.0}:${NPS_MANAGER_PORT:-8082}
conn_type=${NPS_CONN_TYPE:-tcp}
vkey=${NPS_VKEY:-123}
auto_reconnection=true
max_conn=1000
flow_limit=1000
rate_limit=1000
# basic_username=11
# basic_password=3
web_username=${NPS_WEB_USERNAME:-admin}
web_password=${NPS_WEB_PASSWORD:-1234}
crypt=true
compress=true
#pprof_addr=0.0.0.0:9999
disconnect_timeout=60
EOF
    fi
    #statements
  else
    nps_config=${NPS_PREFIX}/conf/nps.conf
    if [ ! -s $nps_config ]; then
    cat<<EOF>$nps_config
appname = nps
#Boot mode(dev|pro)
runmode = ${NPS_RUNMODE:-pro}

#HTTP(S) proxy port, no startup if empty
http_proxy_ip=${NPS_HTTP_PROXY_IP:-0.0.0.0}
http_proxy_port=${NPS_HTTP_PROXY_PORT:-80}
https_proxy_port=${NPS_HTTPS_PROXY_PORT:-443}
https_just_proxy=true
#default https certificate setting
https_default_cert_file=conf/server.pem
https_default_key_file=conf/server.key

##bridge
bridge_type=${NPS_BRIDGE_TYPE:-tcp}
bridge_port=${NPS_BRIDGE_PORT:-8024}
bridge_ip=${NPS_BRIDGE_IP:-0.0.0.0}

# Public password, which clients can use to connect to the server
# After the connection, the server will be able to open relevant ports and parse related domain names according to its own configuration file.
public_vkey=${NPS_PUBLIC_VKEY:-1234}

#Traffic data persistence interval(minute)
#Ignorance means no persistence
#flow_store_interval=1

# log level LevelEmergency->0  LevelAlert->1 LevelCritical->2 LevelError->3 LevelWarning->4 LevelNotice->5 LevelInformational->6 LevelDebug->7
log_level=${NPS_LOG_LEVEL:-7}
#log_path=nps.log

#Whether to restrict IP access, true or false or ignore
#ip_limit=true

#p2p
#p2p_ip=127.0.0.1
#p2p_port=6000

#web
#web_host=a.o.com
web_username=${NPS_WEB_USERNAME:-admin}
web_password=${NPS_WEB_PASSWORD:-123}
web_port =${NPS_WEB_PORT:-8082}
web_ip=${NPS_WEB_IP:-0.0.0.0}
web_base_url=${NPS_WEB_BASE_URL}
web_open_ssl=false
#web_cert_file=conf/server.pem
#web_key_file=conf/server.key
# if web under proxy use sub path. like http://host/nps need this.
#web_base_url=/nps

#Web API unauthenticated IP address(the len of auth_crypt_key must be 16)
#Remove comments if needed
#auth_key=test
auth_crypt_key =${NPS_AUTH_CRYPT_KEY:-1234567812345678}

#allow_ports=9001-9009,10001,11000-12000

#Web management multi-user login
allow_user_login=false
allow_user_register=false
allow_user_change_username=false


#extension
allow_flow_limit=false
allow_rate_limit=false
allow_tunnel_num_limit=false
allow_local_proxy=false
allow_connection_num_limit=false
allow_multi_ip=true
system_info_display=true

#cache
http_cache=false
http_cache_length=100

#get origin ip
http_add_origin_header=false

#pprof debug options
#pprof_ip=0.0.0.0
#pprof_port=9999

#client disconnect timeout
disconnect_timeout=60
EOF
    fi
  fi
  printOK $?
}